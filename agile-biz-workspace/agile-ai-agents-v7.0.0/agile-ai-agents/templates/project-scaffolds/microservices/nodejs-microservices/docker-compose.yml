version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - PAYMENT_SERVICE_URL=http://payment-service:3005
    depends_on:
      - auth-service
      - user-service
      - product-service
      - order-service
      - payment-service
    networks:
      - microservices-network

  # Auth Service
  auth-service:
    build: ./services/auth-service
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URI=mongodb://mongodb:27017/auth-db
      - JWT_SECRET=development-secret
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - microservices-network

  # User Service
  user-service:
    build: ./services/user-service
    environment:
      - NODE_ENV=development
      - PORT=3002
      - MONGODB_URI=mongodb://mongodb:27017/user-db
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - microservices-network

  # Product Service
  product-service:
    build: ./services/product-service
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MONGODB_URI=mongodb://mongodb:27017/product-db
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - rabbitmq
      - redis
    networks:
      - microservices-network

  # Order Service
  order-service:
    build: ./services/order-service
    environment:
      - NODE_ENV=development
      - PORT=3004
      - MONGODB_URI=mongodb://mongodb:27017/order-db
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - microservices-network

  # Payment Service
  payment-service:
    build: ./services/payment-service
    environment:
      - NODE_ENV=development
      - PORT=3005
      - MONGODB_URI=mongodb://mongodb:27017/payment-db
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - STRIPE_SECRET_KEY=sk_test_your_key
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - microservices-network

  # Notification Service
  notification-service:
    build: ./services/notification-service
    environment:
      - NODE_ENV=development
      - PORT=3006
      - MONGODB_URI=mongodb://mongodb:27017/notification-db
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
    depends_on:
      - mongodb
      - rabbitmq
      - mailhog
    networks:
      - microservices-network

  # Databases
  mongodb:
    image: mongo:6-jammy
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network

  # Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network

  # Email Testing
  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - microservices-network

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - microservices-network

  grafana:
    image: grafana/grafana
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  mongodb_data:
  rabbitmq_data:
  redis_data:
  prometheus_data:
  grafana_data: