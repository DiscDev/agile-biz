version: '3.8'

services:
  # Production dashboard service
  dashboard:
    build:
      context: ../..
      dockerfile: scripts/docker/Dockerfile
      target: production
    container_name: agileai-dashboard
    restart: unless-stopped
    ports:
      - "${DASHBOARD_PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - DASHBOARD_PORT=${DASHBOARD_PORT:-3001}
      # Pass through authentication settings
      - DASHBOARD_AUTH_ENABLED=${DASHBOARD_AUTH_ENABLED:-false}
      - DASHBOARD_USERNAME=${DASHBOARD_USERNAME:-admin}
      - DASHBOARD_PASSWORD=${DASHBOARD_PASSWORD:-changeme}
      # Pass through API keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Pass through MCP settings
      - ZEN_MCP_ENABLED=${ZEN_MCP_ENABLED:-false}
      - ZEN_MCP_API_KEY=${ZEN_MCP_API_KEY}
      - GITHUB_MCP_ENABLED=${GITHUB_MCP_ENABLED:-false}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      # Mount project documents for persistence
      - ../../project-documents:/app/project-documents
      # Mount logs for persistence
      - ../../logs:/app/logs
      # Mount .env file (read-only)
      - ../../.env:/app/.env:ro
      # Mount agent and coordination files (read-only)
      - ../../ai-agents:/app/ai-agents:ro
      - ../../ai-agent-coordination:/app/ai-agent-coordination:ro
      - ../../aaa-mcps:/app/aaa-mcps:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agileai-network
    labels:
      - "com.agileaiagents.description=AgileAiAgents Dashboard"
      - "com.agileaiagents.version=2.0.1"

  # Development dashboard service
  dashboard-dev:
    build:
      context: ../..
      dockerfile: scripts/docker/Dockerfile
      target: development
    container_name: agileai-dashboard-dev
    ports:
      - "${DASHBOARD_PORT:-3001}:3001"
    environment:
      - NODE_ENV=development
      - DASHBOARD_PORT=${DASHBOARD_PORT:-3001}
    volumes:
      # Mount entire project for hot reload
      - ../..:/app
      # Use named volume for node_modules to avoid conflicts
      - dashboard_node_modules:/app/project-dashboard/node_modules
    networks:
      - agileai-network
    profiles:
      - development

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: agileai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - dashboard
    networks:
      - agileai-network
    profiles:
      - production-nginx

  # Redis cache (optional, for future scaling)
  redis:
    image: redis:7-alpine
    container_name: agileai-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-agileai2024}
    volumes:
      - redis_data:/data
    networks:
      - agileai-network
    profiles:
      - with-redis

  # PostgreSQL database (optional, for future features)
  postgres:
    image: postgres:15-alpine
    container_name: agileai-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-agileai}
      - POSTGRES_USER=${DATABASE_USER:-agileai}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-agileai2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - agileai-network
    profiles:
      - with-database

networks:
  agileai-network:
    driver: bridge
    name: agileai-network

volumes:
  dashboard_node_modules:
  redis_data:
  postgres_data: